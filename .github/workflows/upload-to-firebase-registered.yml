name: Upload ingested to Firebase Storage (registered)

on:
  workflow_dispatch:
    inputs:
      bucket:
        description: 'Firebase Storage bucket (ex: legislaplay.appspot.com)'
        required: true
        default: 'legislaplay.appspot.com'

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (if secret provided)
        run: |
          if [ -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" ]; then
            echo "FIREBASE_SERVICE_ACCOUNT not set; skipping GCP auth"
            exit 0
          fi
          echo "Secret present; authenticating via google-github-actions/auth"
      - name: Call google-github-actions/auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}"

      - name: Install gcloud and gsutil
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'
          install_components: 'gsutil'

      - id: prepare
        name: Prepare artifact (zip ingested)
        run: |
          set -euo pipefail
          mkdir -p artifacts
          TIMESTAMP=$(date -u +%Y-%m-%d)
          ARTIFACT="artifacts/ingested-${TIMESTAMP}.zip"
          echo "Creating $ARTIFACT from resources/data/ingested (if exists)..."
          if [ -d resources/data/ingested ]; then
            zip -r "$ARTIFACT" resources/data/ingested
            ls -lh "$ARTIFACT"
          else
            echo "Directory resources/data/ingested not found in checkout. Aborting." >&2
            exit 2
          fi
          # expose artifact path for later steps
          echo "artifact_path=$ARTIFACT" >> "$GITHUB_OUTPUT"

      - id: check_bucket
        name: Check GCS bucket and explain next steps (no auto-create)
        run: |
          set -euo pipefail
          # Prefer credentials file created by the auth action
          CREDS="${GOOGLE_GHA_CREDS_PATH:-}"
          if [ -z "$CREDS" ]; then
            # fallback: decode secret to a temp file (handles both raw and base64-encoded secrets)
            echo "GOOGLE_GHA_CREDS_PATH not set, decoding secret to /tmp/key.json"
            echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" | base64 --decode > /tmp/key.json 2>/dev/null || printf '%s' "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > /tmp/key.json
            CREDS=/tmp/key.json
          fi
          echo "Using credentials file: $CREDS"
          # Extract project_id (python is available on GitHub runners)
          if command -v python3 >/dev/null 2>&1; then
            PY=python3
          else
            PY=python
          fi
          PROJECT_ID=$($PY -c "import json,sys;print(json.load(open('$CREDS')).get('project_id',''))")
          DEST_BUCKET="${{ github.event.inputs.bucket }}"
          echo "Checking gs://$DEST_BUCKET"
          if gsutil ls -b "gs://$DEST_BUCKET" >/dev/null 2>&1; then
            echo "bucket_exists=true" >> "$GITHUB_OUTPUT"
            echo "Bucket gs://$DEST_BUCKET exists"
          else
            echo "bucket_exists=false" >> "$GITHUB_OUTPUT"
            echo "==============================================="
            echo "Bucket gs://$DEST_BUCKET not found. This workflow will NOT attempt to create it."
            echo "Possible causes: billing disabled for project '$PROJECT_ID' or bucket was never created."
            echo "To enable upload from CI, do one of the following:" 
            echo "  1) Activate billing for project '$PROJECT_ID' and ensure the service account has 'roles/storage.admin' OR"
            echo "  2) Create the bucket manually (example): gsutil mb -p $PROJECT_ID -c STANDARD -l US gs://$DEST_BUCKET"
            echo "After that, re-run this workflow. Meanwhile the artifact will be attached to this run for manual download."
            echo "==============================================="
          fi
      - name: Notice missing FIREBASE_SERVICE_ACCOUNT secret
        run: |
          if [ -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" ]; then
            echo "FIREBASE_SERVICE_ACCOUNT secret not provided; this workflow cannot authenticate to GCP. The artifact will remain attached to the run for manual download."
          fi

      - id: upload_gcs
        name: Upload artifact to Firebase Storage (GCS)
        if: steps.check_bucket.outputs.bucket_exists == 'true'
        run: |
          set -euo pipefail
          ARTIFACT="${{ steps.prepare.outputs.artifact_path }}"
          DEST_BUCKET="${{ github.event.inputs.bucket }}"
          DEST="gs://${DEST_BUCKET}/ingested/$(basename "$ARTIFACT")"
          echo "Uploading $ARTIFACT -> $DEST"
          gsutil cp "$ARTIFACT" "$DEST"
          echo "Upload finished"

      - id: upload_artifact
        name: Upload artifact to GitHub Actions (fallback)
        uses: actions/upload-artifact@v4
        with:
          name: ingested-artifact-${{ github.run_id }}
          path: ${{ steps.prepare.outputs.artifact_path }}
