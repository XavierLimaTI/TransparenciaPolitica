name: Publish ingested data to GitHub Pages

on:
  workflow_dispatch:
    inputs:
      publish_dir:
        description: 'Folder to publish (relative to repo root). Default: resources/data'
        required: false
        default: 'resources/data'

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare artifacts dir (diagnostics)
        run: |
          mkdir -p artifacts
          echo "ci-sanity: publish-gh-pages start $(date -u +%Y-%m-%dT%H:%M:%SZ)" > artifacts/ci-sanity.txt

      - name: Prepare publish directory
        id: prepare
        run: |
          set -euo pipefail
          PUBLISH_DIR="${{ github.event.inputs.publish_dir }}"
          echo "Publish dir: $PUBLISH_DIR"
          if [ ! -d "$PUBLISH_DIR" ]; then
            echo "Directory $PUBLISH_DIR not found in repository. Aborting." >&2
            exit 2
          fi
          rm -rf ./gh-pages-temp
          mkdir -p gh-pages-temp
          # copy all files preserving structure under a data/ prefix
          cp -r "$PUBLISH_DIR" gh-pages-temp/data
          # create a more complete index.html (lang, title, viewport) and external assets
          mkdir -p gh-pages-temp/assets
          printf '%s\n' '<!doctype html>' '<html lang="pt-BR">' '<head>' '<meta charset="utf-8">' '<meta name="viewport" content="width=device-width,initial-scale=1">' '<title>Transparência Política — Dados publicados</title>' '<link rel="stylesheet" href="./assets/style.css">' '</head>' '<body>' '<header><h1>Transparência Política — Dados publicadas</h1></header>' '<main>' '<p>Esta página lista os datasets publicados pelo pipeline de ingestão. Clique em um arquivo para abri-lo.</p>' '<div id="manifest-loading">Carregando manifest...</div>' '<ul id="datasets"></ul>' '</main>' '<footer><p>Dados estáticos publicados via GitHub Pages.</p></footer>' '<script src="./assets/index.js"></script>' '</body>' '</html>' > gh-pages-temp/index.html

          # create a small JS file that loads manifest.json (or index.json) and renders links
          printf '%s\n' "(function(){" "  // Interactive dataset index: search, sort and paginate" "  function elt(tag, text){ const e=document.createElement(tag); if(text) e.textContent=text; return e }" "  function human(n){ if(!n && n!==0) return ''; var u=['bytes','KB','MB','GB']; var i=0; while(n>1024 && i<u.length-1){ n/=1024; i++; } return ' — '+(Math.round(n*10)/10)+' '+u[i]; }" "  const root=document.body; root.style.fontFamily='system-ui,Segoe UI,Roboto,Arial,sans-serif';" "  const container=document.createElement('div'); container.style.maxWidth='980px'; container.style.margin='24px'; root.insertBefore(container, root.firstChild);" "  const header=document.createElement('header'); header.innerHTML='<h1>Transparência Política — Dados publicados</h1>'; container.appendChild(header);" "  const controls=document.createElement('div'); controls.style.margin='12px 0'; controls.innerHTML='<input id=ds-search placeholder="buscar por nome..." style="width:40%;padding:6px;margin-right:8px"><select id=ds-sort style="padding:6px;margin-right:8px"><option value="name">Ordenar: nome</option><option value="size">Ordenar: tamanho</option></select><button id=ds-clear style="padding:6px">Limpar</button>'; container.appendChild(controls);" "  const info=document.createElement('div'); info.id='manifest-loading'; info.textContent='Carregando manifest...'; container.appendChild(info);" "  const list=document.createElement('ul'); list.id='datasets'; list.style.paddingLeft='20px'; container.appendChild(list);" "  const pager=document.createElement('div'); pager.style.marginTop='12px'; pager.innerHTML='<button id=prev style="padding:6px;margin-right:6px">Anterior</button><span id=pageinfo style="margin:0 8px"></span><button id=next style="padding:6px">Próxima</button>'; container.appendChild(pager);" "  let all=[]; let filtered=[]; const perPage=50; let page=0; function render(){ list.innerHTML=''; if(!filtered.length){ list.appendChild(elt('li','Nenhum dataset encontrado.')); pageInfo(); return } const start=page*perPage; const slice=filtered.slice(start,start+perPage); slice.forEach(f=>{ const li=elt('li'); const name=(f.name||f).replace(/^\/+/, ''); const a=document.createElement('a'); a.href='./data/'+name; a.target='_blank'; const label=name + (f.count? (' — '+f.count+' rows') : ''); if(f.size) label += human(f.size); a.textContent=label; li.appendChild(a); list.appendChild(li); }); pageInfo(); }" "  function pageInfo(){ const infoEl=document.getElementById('pageinfo'); const total=filtered.length; const from=total? (page*perPage+1) : 0; const to=Math.min(total, (page+1)*perPage); infoEl.textContent = `Mostrando ${from}-${to} de ${total}`; }" "  function applyFilter(){ const q=document.getElementById('ds-search').value.trim().toLowerCase(); filtered = all.filter(f => !q || (f.name||'').toLowerCase().includes(q)); const sort=document.getElementById('ds-sort').value; if(sort==='size'){ filtered.sort((a,b)=>(b.size||0)-(a.size||0)) } else { filtered.sort((a,b)=>( (a.name||'').localeCompare(b.name||'') )) } page=0; render(); }" "  document.addEventListener('click', function(e){ if(e.target && e.target.id==='ds-clear'){ document.getElementById('ds-search').value=''; applyFilter(); } if(e.target && e.target.id==='prev'){ if(page>0){ page--; render(); }} if(e.target && e.target.id==='next'){ if((page+1)*perPage < filtered.length){ page++; render(); } } });" "  document.addEventListener('input', function(e){ if(e.target && e.target.id==='ds-search'){ applyFilter(); } if(e.target && e.target.id==='ds-sort'){ applyFilter(); } });" "  fetch('./data/manifest.json').then(r=>r.json()).then(m => { info.style.display='none'; all = (m.files || []).map(x => ({ name: x.name || x, size: x.size || 0, count: x.count })); applyFilter(); }).catch(_=>{ fetch('./data/index.json').then(r=>r.json()).then(m=>{ info.style.display='none'; all = (m.files || []).map(x=>({ name: x.name || x, size: x.size || 0, count: x.count })); applyFilter(); }).catch(e=>{ info.textContent='Não foi possível carregar manifest/index: '+(e&&e.message||e); }) });" "})();" > gh-pages-temp/assets/index.js

          # create a minimal stylesheet
          printf '%s\n' 'body{font-family:system-ui,Segoe UI,Roboto,Arial,sans-serif;margin:24px;color:#111}' 'header h1{margin:0 0 12px 0;font-size:20px}' 'main p{color:#333}' '#datasets{margin-top:12px;padding-left:20px}' '#datasets li{margin:6px 0}' 'footer{margin-top:24px;color:#666;font-size:13px}' > gh-pages-temp/assets/style.css
          # generate a manifest.json with relative file names and sizes
          echo '{"files":[' > gh-pages-temp/data/manifest.json
          first=true
          while IFS= read -r -d $'\0' file; do
            rel=${file#gh-pages-temp/data/}
            size=$(stat -c%s "$file")
            if [ "$first" = true ]; then
              first=false
            else
              echo ',' >> gh-pages-temp/data/manifest.json
            fi
            printf '  {"name":"%s","size":%s}' "$rel" "$size" >> gh-pages-temp/data/manifest.json
          done < <(find gh-pages-temp/data -type f -print0)
          echo ']}' >> gh-pages-temp/data/manifest.json
          ls -la gh-pages-temp
          echo "publish_path=gh-pages-temp" >> "$GITHUB_OUTPUT"

      - name: Publish to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ steps.prepare.outputs.publish_path }}
          publish_branch: gh-pages
          # prevent removing existing files outside our folder unless needed
          keep_files: false

      - name: Print public URL
        run: |
          REPO="${{ github.repository }}"
          OWNER=$(echo "$REPO" | cut -d'/' -f1)
          NAME=$(echo "$REPO" | cut -d'/' -f2)
          echo "Published to: https://${OWNER}.github.io/${NAME}/data/"
