name: Publish ingested data to GitHub Pages

on:
  workflow_dispatch:
    inputs:
      publish_dir:
        description: 'Folder to publish (relative to repo root). Default: resources/data'
        required: false
        default: 'resources/data'

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare artifacts dir (diagnostics)
        run: |
          mkdir -p artifacts
          echo "ci-sanity: publish-gh-pages start $(date -u +%Y-%m-%dT%H:%M:%SZ)" > artifacts/ci-sanity.txt

      - name: Prepare publish directory
        id: prepare
        run: |
          set -euo pipefail
          PUBLISH_DIR="${{ github.event.inputs.publish_dir }}"
          echo "Publish dir: $PUBLISH_DIR"
          if [ ! -d "$PUBLISH_DIR" ]; then
            echo "Directory $PUBLISH_DIR not found in repository. Aborting." >&2
            exit 2
          fi
          rm -rf ./gh-pages-temp
          mkdir -p gh-pages-temp
          # copy all files preserving structure under a data/ prefix
          cp -r "$PUBLISH_DIR" gh-pages-temp/data
          # create a more complete index.html (lang, title, viewport) and external assets
          mkdir -p gh-pages-temp/assets
          printf '%s\n' '<!doctype html>' '<html lang="pt-BR">' '<head>' '<meta charset="utf-8">' '<meta name="viewport" content="width=device-width,initial-scale=1">' '<title>Transparência Política — Dados publicados</title>' '<link rel="stylesheet" href="./assets/style.css">' '</head>' '<body>' '<header><h1>Transparência Política — Dados publicadas</h1></header>' '<main>' '<p>Esta página lista os datasets publicados pelo pipeline de ingestão. Clique em um arquivo para abri-lo.</p>' '<div id="manifest-loading">Carregando manifest...</div>' '<ul id="datasets"></ul>' '</main>' '<footer><p>Dados estáticos publicados via GitHub Pages.</p></footer>' '<script src="./assets/index.js"></script>' '</body>' '</html>' > gh-pages-temp/index.html

          # create a small JS file that loads manifest.json (or index.json) and renders links
          printf '%s\n' "(function(){" "  function elt(tag, text){ const e=document.createElement(tag); if(text) e.textContent=text; return e }" "  function human(n){ if(!n && n!==0) return ''; var u=['bytes','KB','MB','GB']; var i=0; while(n>1024 && i<u.length-1){ n/=1024; i++; } return ' — '+(Math.round(n*10)/10)+' '+u[i]; }" "  const out=document.getElementById('datasets');" "  const info=document.getElementById('manifest-loading');" "  function listFiles(manifest){" "    info.style.display='none';" "    const files=manifest.files || (manifest.rows? [{name:manifest.source, count:manifest.count}]:[]);" "    if(Array.isArray(files) && files.length){" "      files.forEach(f => { let li=document.createElement('li'); let name=(f.name||f).replace(/^\/+/, ''); let a=document.createElement('a'); a.href='./data/'+name; a.target='_blank'; let label = name + (f.count? (' — '+f.count+' rows') : ''); if(f.size) label += human(f.size); a.textContent = label; li.appendChild(a); out.appendChild(li); });" "    } else { out.appendChild(elt('li','Nenhum dataset encontrado.')) }" "  }" "  fetch('./data/manifest.json').then(r=>r.json()).then(listFiles).catch(_=>fetch('./data/index.json').then(r=>r.json()).then(listFiles).catch(e=>{ info.textContent='Não foi possível carregar manifest/index: '+(e&&e.message||e); }))" "})();" > gh-pages-temp/assets/index.js

          # create a minimal stylesheet
          printf '%s\n' 'body{font-family:system-ui,Segoe UI,Roboto,Arial,sans-serif;margin:24px;color:#111}' 'header h1{margin:0 0 12px 0;font-size:20px}' 'main p{color:#333}' '#datasets{margin-top:12px;padding-left:20px}' '#datasets li{margin:6px 0}' 'footer{margin-top:24px;color:#666;font-size:13px}' > gh-pages-temp/assets/style.css
          # generate a manifest.json with relative file names and sizes
          echo '{"files":[' > gh-pages-temp/data/manifest.json
          first=true
          while IFS= read -r -d $'\0' file; do
            rel=${file#gh-pages-temp/data/}
            size=$(stat -c%s "$file")
            if [ "$first" = true ]; then
              first=false
            else
              echo ',' >> gh-pages-temp/data/manifest.json
            fi
            printf '  {"name":"%s","size":%s}' "$rel" "$size" >> gh-pages-temp/data/manifest.json
          done < <(find gh-pages-temp/data -type f -print0)
          echo ']}' >> gh-pages-temp/data/manifest.json
          ls -la gh-pages-temp
          echo "publish_path=gh-pages-temp" >> "$GITHUB_OUTPUT"

      - name: Publish to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ steps.prepare.outputs.publish_path }}
          publish_branch: gh-pages
          # prevent removing existing files outside our folder unless needed
          keep_files: false

      - name: Print public URL
        run: |
          REPO="${{ github.repository }}"
          OWNER=$(echo "$REPO" | cut -d'/' -f1)
          NAME=$(echo "$REPO" | cut -d'/' -f2)
          echo "Published to: https://${OWNER}.github.io/${NAME}/data/"
