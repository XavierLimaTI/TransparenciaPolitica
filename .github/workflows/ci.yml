name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}
  schedule:
    # run monthly on the 1st at 03:00 UTC
    - cron: '0 3 1 * *'

jobs:
  test:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm test

  build:
    name: Build (artifact)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  integration:
    name: Live integration (conditional)
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || secrets.PORTAL_API_KEY != ''
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run integration checks
        env:
          PORTAL_API_KEY: ${{ secrets.PORTAL_API_KEY }}
          PROXY_ADMIN_TOKEN: ${{ secrets.PROXY_ADMIN_TOKEN }}
        run: |
          # Integration runner: run integration checks and fail CI on failure
          npm run test:integration
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: Unit tests (Jest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python for workflow validation
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install PyYAML
        run: python -m pip install pyyaml

      - name: Validate workflow YAML
        run: python scripts/validate_workflows.py

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --include=dev
        env:
          NODE_ENV: development


      - name: Sanity check @playwright/test
        run: |
          echo "Checking @playwright/test..."
          npm ls @playwright/test || echo "@playwright/test not found"


      - name: Run unit tests (Jest)
        run: npm test --silent

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: coverage/lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false

  e2e:
    name: E2E (Playwright)
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --include=dev
        env:
          NODE_ENV: development


      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        # ensure browsers cache path is set for subsequent steps
        env:
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
      
      - name: Sanity check @playwright/test (e2e)
        run: |
          echo "Checking @playwright/test for e2e..."
          npm ls @playwright/test || echo "@playwright/test not found"

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      # E2E debug info removed after stability

      - name: Start static server for tests
        run: |
          echo 'Starting static server on port 8000 (http-server fallback)'
          # prefer npx http-server, fallback to a tiny node static server if missing
          if npx --no-install http-server -v >/dev/null 2>&1; then
            npx http-server -c-1 -p 8000 &
            echo $! > .httpserver.pid
          else
            node -e "const http=require('http'),fs=require('fs'),p=require('path');const srv=http.createServer((req,res)=>{let reqPath=req.url.split('?')[0]; if(reqPath==='/'||reqPath==='') reqPath='/index.html'; let f=p.join(process.cwd(),reqPath); fs.stat(f,(e,st)=>{ if(e){ res.statusCode=404; res.end('Not found'); return; } if(st.isDirectory()){ const idx=p.join(f,'index.html'); fs.stat(idx,(ei,sti)=>{ if(ei){ res.statusCode=404; res.end('Not found'); return;} fs.createReadStream(idx).pipe(res); }); return; } fs.createReadStream(f).pipe(res); }); }); srv.listen(8000,()=>console.log('tiny server started')); process.on('SIGTERM',()=>srv.close()); console.log('node static server started');" &
            echo $! > .httpserver.pid
          fi

      - name: Wait for static server to respond
        run: |
          echo 'Waiting for static server on http://127.0.0.1:8000/'
          for i in {1..30}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8000/ || echo "000")
            echo "Attempt $i: HTTP status $status"
            if [ "$status" = "200" ]; then
              echo 'Static server is up'; exit 0
            fi
            sleep 1
          done
          echo 'Static server did not respond in time'; exit 1

      - name: Wait for fixture to be available
        run: |
          echo 'Waiting for tests fixture to be available at http://127.0.0.1:8000/tests/fixtures/despesas.csv'
          # increase retries to allow slower runners or network FS mounts
          for i in {1..90}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8000/tests/fixtures/despesas.csv || echo "000")
            echo "Attempt $i: HTTP status $status"
            if [ "$status" = "200" ]; then
              echo 'Fixture available'; exit 0
            fi
            sleep 2
          done
          echo 'Fixture not available after retries'; exit 1

      - name: Run Playwright tests
        run: |
          echo 'Ensuring Playwright browsers installed (safe)'
          npx playwright install --with-deps || true
          echo 'Running Playwright tests with extended timeout and retries'
          # run Playwright and produce an HTML report (playwright-report) so CI can upload it on failure
          npx playwright test tests/e2e --reporter=github,html --timeout=180000 --retries=3 --trace=on-first-retry
        env:
          DISPLAY: :99
          # increase default playwright timeout for slower CI runners
          PLAYWRIGHT_TEST_TIMEOUT: '180000'
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright

      - name: Upload Playwright report (if present)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report

      - name: Stop static server
        if: always()
        run: |
          if [ -f .httpserver.pid ]; then
            kill "$(cat .httpserver.pid)" || true
            rm -f .httpserver.pid
          fi

  monthly-download:
    name: Monthly Portal download
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci --include=dev

      - name: Run downloader for previous month
        env:
          PORTAL_API_KEY: ${{ secrets.PORTAL_API_KEY }}
        run: |
          set -euo pipefail
          # compute YYYY-MM-01 for previous month using GNU date
          START=$(date -d "$(date +%Y-%m-01) -1 month" +%Y-%m-01)
          echo "Running downloader for $START"
          node scripts/download_portal_monthly.js --start=$START --end=$START --type=despesas --extract

      - name: Upload downloaded artifact
        uses: actions/upload-artifact@v4
        with:
          name: portal-dataset-prev-month
          path: resources/data/despesas/
